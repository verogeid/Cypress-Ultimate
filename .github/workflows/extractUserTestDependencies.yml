name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      - name: Extraer alias desde .aliases.json
        id: extract-aliases
        run: |
          ESLINT_CONFIG="./.aliases.json"
          declare -A alias_map

          if [[ ! -f "$ESLINT_CONFIG" ]]; then
            echo "El archivo de configuración de alias no existe: $ESLINT_CONFIG"
            exit 1
          fi

          alias_entries=$(grep -oP '"@[^"]+" *: *"[^"]+"' "$ESLINT_CONFIG" || echo "")
          echo "Alias extraídos del archivo .aliases.json: $alias_entries"

          echo "$alias_entries" | while IFS= read -r line; do
            alias_name=$(echo "$line" | grep -oP '"@[^"]+' | tr -d '"')
            real_path=$(echo "$line" | grep -oP '":\s*"[^"]+"' | sed -E 's/^":\s*"//')

            echo "Alias encontrado: $alias_name"
            echo "Ruta real asociada: $real_path"

            alias_name_var="ALIAS_${alias_name//@/_}"   # Cambio aquí
            echo "Variable de entorno: $alias_name_var"

            alias_map["$alias_name_var"]="$real_path"
          done

          # Exportar alias como variables de entorno utilizando GITHUB_ENV
          for alias in "${!alias_map[@]}"; do
            echo "$alias=${alias_map[$alias]}" >> $GITHUB_ENV
          done

          echo "Alias exportados correctamente"

      - name: Verificar alias exportados
        run: |
          echo "Alias exportados:"
          printenv | grep ALIAS_

      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "$TEST_POSIX" || echo "")
          
          echo "Referencias encontradas en el archivo de prueba: "
          echo "$FILE_REFERENCES"

      - name: Limpiar y extraer rutas de los archivos
        id: clean-file-references
        run: |
          RESOLVED_FILES=""
          while IFS= read -r file; do
            path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^"'"'"']+)["'"'"'];/\1/')
            echo "Ruta extraída: $path"
            RESOLVED_FILES+="$path"$'\n'
          done <<< "$FILE_REFERENCES"

      - name: Sustituir alias por rutas reales
        id: replace-aliases
        run: |
          FINAL_RESOLVED_FILES=""
          while IFS= read -r resolved_path; do
            echo "Ruta antes de la sustitución: $resolved_path"
            if [[ "$resolved_path" == @* ]]; then
              alias_name=$(echo "$resolved_path" | cut -d'/' -f1)
              alias_name_var="ALIAS_${alias_name//@/_}"
              alias_subpath=$(echo "$resolved_path" | sed -E 's|^[^/]+/?||')

              echo "Alias encontrado: $alias_name"
              echo "Variable de entorno del alias: $alias_name_var"
              echo "Subruta: $alias_subpath"

              resolved_path="${!alias_name_var}/$alias_subpath"
              echo "Ruta después de sustitución: $resolved_path"
            fi

            FINAL_RESOLVED_FILES+="$resolved_path"$'\n'
          done <<< "$RESOLVED_FILES"

      - name: Filtrar solo archivos cypress
        id: filter-cypress-files
        run: |
          CYPRESS_FILES=""
          while IFS= read -r resolved_file; do
            if [[ "$resolved_file" == cypress/* ]]; then
              CYPRESS_FILES+="$resolved_file"$'\n'
            fi
          done <<< "$FINAL_RESOLVED_FILES"
          
          echo "Archivos cypress filtrados: "
          echo "$CYPRESS_FILES"

      - name: Generar archivo JSON de resultados
        id: generate-json
        run: |
          JSON_OUTPUT=$(echo "$CYPRESS_FILES" | sort | uniq | jq -Rn --arg source "$TEST_POSIX" '{source: $source, files: [inputs | split("\n") | map(select(length > 0))]}')
          echo "$JSON_OUTPUT" > extracted_files.json

      - name: Output results
        run: |
          echo "Archivos resueltos:"
          cat extracted_files.json

