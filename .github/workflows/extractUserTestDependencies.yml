name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Comprobar que el código del repositorio está disponible
      - name: Check out code
        uses: actions/checkout@v2

      # Paso 2: Validar que el archivo de prueba especificado existe
      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      # Paso 3: Buscar todas las sentencias import que terminan con ;
      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          echo "Contenido del archivo de prueba:"
          cat "$TEST_POSIX"
          
          # Buscar sentencias import que terminan con ;
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'\''][^"'\'' ]+["'\''];' "$TEST_POSIX" || echo "")

          # Si no se encuentran referencias, mostrar un mensaje de advertencia
          if [[ -z "$FILE_REFERENCES" ]]; then
            echo "No se encontraron referencias en el archivo de prueba."
            exit 1
          fi

          echo "Referencias encontradas:"
          echo "$FILE_REFERENCES"

          # Inicializar variable para almacenar las rutas resueltas
          RESOLVED_FILES=""
          
          # Procesar cada línea que contiene una referencia de importación
          while IFS= read -r file; do
            # Si la referencia tiene un alias, resolver la ruta
            if [[ "$file" == @* ]]; then
              alias=$(echo "$file" | cut -d/ -f1)
              path=$(echo "$file" | cut -d/ -f2-)
              real_path=$(eval echo "\$$alias")/$path
              RESOLVED_FILES+="$real_path"$'\n'
            # Si la referencia está bajo cypress, agregarla directamente
            elif [[ "$file" == cypress/* ]]; then
              RESOLVED_FILES+="$file"$'\n'
            else
              # Agregar referencias sin alias o fuera de cypress
              RESOLVED_FILES+="$file"$'\n'
            fi
          done <<< "$FILE_REFERENCES"

          # Eliminar rutas duplicadas y guardar el resultado en un archivo temporal
          echo "$RESOLVED_FILES" | sort | uniq > resolved_files.txt
          echo "Rutas resueltas:"
          cat resolved_files.txt

      # Paso 4: Crear un archivo JSON con las rutas de los archivos resueltas
      - name: Crear JSON con rutas de archivos
        run: |
          jq -Rn 'inputs | split("\n") | map(select(length > 0)) | {files: .}' < resolved_files.txt > resolved_files.json
          echo "Archivo JSON generado:"
          cat resolved_files.json

      # Paso 5: Guardar el archivo JSON como un artefacto
      - name: Guardar JSON como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: resolved-files
          path: resolved_files.json

