name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      # Clonar el repositorio
      - name: Check out code
        uses: actions/checkout@v2

      # Validar la existencia del archivo de prueba proporcionado
      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      # Extraer los alias definidos en el archivo .eslintrc.json
      - name: Parse ESLint Config y Extraer Aliases
        id: extract-aliases
        run: |
          if [[ ! -f ".eslintrc.json" ]]; then
            echo "Archivo .eslintrc.json no encontrado"
            exit 1
          fi

          # Obtener los alias desde el archivo .eslintrc.json
          ALIAS_MAP=$(jq -r '.settings["import/resolver"].alias.map[] | @csv' .eslintrc.json | sed 's/"//g' || echo "")

          if [[ -z "$ALIAS_MAP" ]]; then
            echo "No se encontraron alias en .eslintrc.json"
            exit 1
          fi

          echo "Aliases encontrados:"
          echo "$ALIAS_MAP"

          # Exportar los alias como variables de entorno
          echo "$ALIAS_MAP" | while IFS=',' read -r alias path; do
            echo "$alias=$path" >> $GITHUB_ENV
          done

      # Buscar referencias a import y cy.fixture en el archivo de prueba
      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          
          # Extraer referencias de sentencias import y cy.fixture
          FILE_REFERENCES=$(grep -Eo '(import .* from|cy.fixture.*)' "$TEST_POSIX" | grep -Eo '"[^"]+"' | tr -d '"' || echo "")

          if [[ -z "$FILE_REFERENCES" ]]; then
            echo "No se encontraron referencias en el archivo de prueba."
            exit 1
          fi

          echo "Referencias encontradas:"
          echo "$FILE_REFERENCES"

          # Resolver alias y normalizar rutas
          RESOLVED_FILES=""
          while IFS= read -r file; do
            if [[ "$file" == @* ]]; then
              # Resolver rutas basadas en alias
              alias=$(echo "$file" | cut -d/ -f1)
              path=$(echo "$file" | cut -d/ -f2-)
              real_path=$(eval echo "\$$alias")/$path
              RESOLVED_FILES+="$real_path"$'\n'
            elif [[ "$file" == cypress/* ]]; then
              # Mantener rutas relativas a Cypress
              RESOLVED_FILES+="$file"$'\n'
            else
              echo "Ruta no compatible: $file"
            fi
          done <<< "$FILE_REFERENCES"

          # Eliminar duplicados y guardar las rutas resueltas
          echo "$RESOLVED_FILES" | sort | uniq > resolved_files.txt
          echo "Rutas resueltas:"
          cat resolved_files.txt

      # Crear un archivo JSON con las rutas resueltas
      - name: Crear JSON con rutas de archivos
        run: |
          jq -Rn 'inputs | split("\n") | map(select(length > 0)) | {files: .}' < resolved_files.txt > resolved_files.json
          echo "Archivo JSON generado:"
          cat resolved_files.json

      # Subir el archivo JSON generado como artefacto
      - name: Guardar JSON como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: resolved-files
          path: resolved_files.json

