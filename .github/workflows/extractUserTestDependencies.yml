name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          echo "Valor de TEST_POSIX antes de la validación: $TEST_POSIX"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      - name: Extraer alias desde .aliases.json
        id: extract-aliases
        run: |
          ESLINT_CONFIG="./.aliases.json"
          echo "Valor de ESLINT_CONFIG: $ESLINT_CONFIG"
          declare -A alias_map

          if [[ ! -f "$ESLINT_CONFIG" ]]; then
            echo "El archivo de configuración de alias no existe: $ESLINT_CONFIG"
            exit 1
          fi

          alias_entries=$(grep -oP '"@[^"]+" *: *"[^"]+"' "$ESLINT_CONFIG" || echo "")
          echo "Alias extraídos del archivo .aliases.json: $alias_entries"

          echo "$alias_entries" | while IFS= read -r line; do
            echo "Valor de 'line' antes de la asignación: $line"
            alias_name=$(echo "$line" | grep -oP '"@[^"]+' | tr -d '"')
            echo "Valor de 'alias_name' después de asignación: $alias_name"

            real_path=$(echo "$line" | grep -oP '":\s*"[^"]+"' | sed -E 's/^":\s*"//')
            echo "Valor de 'real_path' después de asignación: $real_path"

            # Verificar valores antes del filtro
            echo "Alias original: $alias_name"
            echo "Ruta real antes del filtro: $real_path"

            alias_name_var="ALIAS_${alias_name//@/_}"  # Cambio aquí
            echo "Variable de entorno: $alias_name_var"

            alias_map["$alias_name_var"]="$real_path"
          done

          # Exportar alias como variables de entorno utilizando GITHUB_ENV
          for alias in "${!alias_map[@]}"; do
            echo "Valor de alias antes de exportarlo: $alias"
            echo "Valor de alias_map[$alias] antes de exportarlo: ${alias_map[$alias]}"
            echo "$alias=${alias_map[$alias]}" >> $GITHUB_ENV
          done

          echo "Alias exportados correctamente"

      - name: Verificar alias exportados
        run: |
          echo "Alias exportados:"
          printenv | grep ALIAS_

      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          echo "Valor de TEST_POSIX antes de buscar referencias: $TEST_POSIX"

          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "$TEST_POSIX" || echo "")
          echo "Valor de FILE_REFERENCES después de la asignación: $FILE_REFERENCES"

          RESOLVED_FILES=""
          echo "Valor de RESOLVED_FILES antes del ciclo: $RESOLVED_FILES"
          while IFS= read -r file; do
            echo "Valor de 'file' antes de la asignación: $file"
            path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^"'"'"']+)["'"'"'];/\1/')
            echo "Valor de 'path' después de asignación: $path"

            if [[ "$path" == .* || "$path" == ..* ]]; then
              resolved_path=$(realpath --relative-to=. "$(dirname "$TEST_POSIX")/$path")
              echo "Ruta relativa resuelta: $resolved_path"
            elif [[ "$path" == @* ]]; then
              alias_name=$(echo "$path" | cut -d'/' -f1)
              echo "Valor de alias_name antes de la asignación: $alias_name"
              alias_subpath=$(echo "$path" | sed -E 's|^[^/]+/?||')
              echo "Valor de alias_subpath después de asignación: $alias_subpath"
              resolved_path="${!alias_name}/$alias_subpath"
              echo "Ruta de alias resuelta: $resolved_path"
            else
              resolved_path="$path"
              echo "Ruta sin alias: $resolved_path"
            fi

            if [[ "$resolved_path" == cypress/* ]]; then
              RESOLVED_FILES+="$resolved_path"$'\n'
            fi
          done <<< "$FILE_REFERENCES"
          echo "Valor de RESOLVED_FILES después del ciclo: $RESOLVED_FILES"

          JSON_OUTPUT=$(echo "$RESOLVED_FILES" | sort | uniq | jq -Rn --arg source "$TEST_POSIX" '{source: $source, files: [inputs | split("\n") | map(select(length > 0))]}')
          echo "$JSON_OUTPUT" > extracted_files.json

      - name: Output results
        run: |
          echo "Archivos resueltos:"
          cat extracted_files.json

