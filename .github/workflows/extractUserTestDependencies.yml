name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      - name: Parse ESLint Config y Extraer Aliases
        id: extract-aliases
        run: |
          if [[ ! -f ".eslintrc.json" ]]; then
            echo "Archivo .eslintrc.json no encontrado"
            exit 1
          fi
          ALIAS_MAP=$(jq -r '.settings["import/resolver"].alias.map[] | @csv' .eslintrc.json | sed 's/"//g' || echo "")
          if [[ -z "$ALIAS_MAP" ]]; then
            echo "No se encontraron alias en .eslintrc.json, continuando sin resolver rutas de alias."
          else
            echo "Aliases encontrados:"
            echo "$ALIAS_MAP"
            echo "$ALIAS_MAP" | while IFS=',' read -r alias path; do
              echo "$alias=$path" >> $GITHUB_ENV
            done
          fi

      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'\''][^"'\'' ]+["'\''];' "$TEST_POSIX")
          if [[ -z "$FILE_REFERENCES" ]]; then
            echo "No se encontraron referencias en el archivo de prueba."
            exit 1
          fi
          RESOLVED_FILES=""
          while IFS= read -r file; do
            if [[ "$file" == @* ]]; then
              alias=$(echo "$file" | cut -d/ -f1)
              path=$(echo "$file" | cut -d/ -f2-)
              real_path=$(eval echo "\$$alias")/$path
              RESOLVED_FILES+="$real_path"$'\n'
            elif [[ "$file" == cypress/* ]]; then
              RESOLVED_FILES+="$file"$'\n'
            else
              RESOLVED_FILES+="$file"$'\n'
            fi
          done <<< "$FILE_REFERENCES"
          
          # Filtrar las líneas vacías y crear un JSON
          RESOLVED_FILES_ARRAY=$(echo "$RESOLVED_FILES" | sed '/^$/d' | awk '{print "\"" $0 "\""}' | paste -sd, -)
          RESOLVED_FILES_JSON="{\"source\":\"$TEST_POSIX\",\"files\":[$RESOLVED_FILES_ARRAY]}"

          # Mostrar el JSON generado en memoria
          echo "$RESOLVED_FILES_JSON"

