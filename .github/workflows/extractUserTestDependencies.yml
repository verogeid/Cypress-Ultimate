Aquí está el workflow sin guardar archivos ni artefactos:

name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      - name: Parse ESLint Config y Extraer Aliases
        id: extract-aliases
        run: |
          if [[ ! -f ".eslintrc.json" ]]; then
            echo "Archivo .eslintrc.json no encontrado"
            exit 1
          fi
          ALIAS_MAP=$(jq -r '.settings["import/resolver"].alias.map[] | @csv' .eslintrc.json | sed 's/"//g' || echo "")
          if [[ -z "$ALIAS_MAP" ]]; then
            echo "No se encontraron alias en .eslintrc.json, continuando sin resolver rutas de alias."
          else
            echo "Aliases encontrados:"
            echo "$ALIAS_MAP"
            echo "$ALIAS_MAP" | while IFS=',' read -r alias path; do
              echo "$alias=$path" >> $GITHUB_ENV
            done
          fi

      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          echo "Contenido del archivo de prueba:"
          cat "$TEST_POSIX"
          
          # Buscar todas las líneas con 'import' y extraer solo las rutas
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'\''][^"'\'' ]+["'\''];' "$TEST_POSIX" || echo "")
          
          if [[ -z "$FILE_REFERENCES" ]]; then
            echo "No se encontraron referencias en el archivo de prueba."
            exit 1
          fi
          
          echo "Referencias encontradas:"
          echo "$FILE_REFERENCES"

          # Inicializar variable para almacenar las rutas de importación
          IMPORT_PATHS=""
          
          # Extraer solo las rutas de importación y almacenarlas
          while IFS= read -r line; do
            # Usamos una expresión regular para extraer la ruta después de 'from'
            path=$(echo "$line" | sed -E 's/.*from\s+["'\''"]([^"'\''"]+)["'\''"].*/\1/')
            IMPORT_PATHS+="$path"$'\n'
          done <<< "$FILE_REFERENCES"
          
          echo "Rutas de importación:"
          echo "$IMPORT_PATHS"
          
          # Limpiar las rutas duplicadas y eliminar líneas vacías
          CLEAN_PATHS=$(echo "$IMPORT_PATHS" | sort | uniq | sed '/^$/d')

          # Generar el JSON con las rutas de importación
          echo '{"source":"'"$TEST_POSIX"'","files":['
          echo "$CLEAN_PATHS" | sed 's/^/"/;s/$/"/' | paste -sd, -
          echo ']}'

