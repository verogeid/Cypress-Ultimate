name: Extract File References

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'Ruta del archivo de prueba'
        required: true
        default: 'cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts'

jobs:
  extract-references:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Step 1 - Extract import statements
      run: |
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        echo "Referencias encontradas:"
        echo "$FILE_REFERENCES"

    - name: Step 2 - Process each import line
      run: |
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        while IFS= read -r file; do
          echo "Procesando línea de import: $file"
        done <<< "$FILE_REFERENCES"
        echo "Líneas procesadas."

    - name: Step 3 - Extract paths from import statements
      run: |
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        while IFS= read -r file; do
          path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^"'"'"']+)["'"'"'];/\1/')
          echo "Ruta extraída: $path"
        done <<< "$FILE_REFERENCES"
        echo "Rutas extraídas correctamente."

    - name: Step 4 - Resolve relative paths
      run: |
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        while IFS= read -r file; do
          path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^"'"'"']+)["'"'"'];/\1/')
          if [[ "$path" == .* || "$path" == ..* ]]; then
            resolved_path=$(realpath --relative-to=. "$(dirname "${{ github.event.inputs.test_file }}")/$path")
            echo "Ruta resuelta (relativa): $resolved_path"
          fi
        done <<< "$FILE_REFERENCES"
        echo "Rutas relativas resueltas."

    - name: Step 5 - Resolve alias paths
      run: |
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        while IFS= read -r file; do
          path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^"'"'"']+)["'"'"'];/\1/')
          if [[ "$path" == @* ]]; then
            alias_name=$(echo "$path" | cut -d'/' -f1)
            alias_subpath=$(echo "$path" | sed -E 's|^[^/]+/?||')
            alias_var_name="ALIAS_${alias_name//@/}"
            resolved_path="${!alias_var_name}/$alias_subpath"
            echo "Ruta resuelta (alias): $resolved_path"
          fi
        done <<< "$FILE_REFERENCES"
        echo "Rutas de alias resueltas."

    - name: Step 6 - Filter and display relevant files
      run: |
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        RESOLVED_FILES=""
        while IFS= read -r file; do
          path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^"'"'"']+)["'"'"'];/\1/')
          if [[ "$path" == cypress/* ]]; then
            RESOLVED_FILES+="$path"$'\n'
            echo "Archivo relevante encontrado: $path"
          fi
        done <<< "$FILE_REFERENCES"
        echo "Archivos relevantes finales:"
        echo "$RESOLVED_FILES"

