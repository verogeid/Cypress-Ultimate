name: Extract File References without TypeScript 

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'Ruta del archivo de prueba'
        required: true
        default: 'cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts'

jobs:
  extract-references:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    # Step 1 - READ ALIASES
    - name: Step 1 - Read aliases from .aliases.json
      run: |
        echo "Reading aliases from .aliases.json"
        ALIAS_JSON=$(cat .aliases.json)
        echo "$ALIAS_JSON" | grep -o '"@[^"]*":\s*"[^"]*"' | awk -F ': ' '{print $1, $2}' > alias_list.txt
        echo "Aliases read and stored in alias_list.txt"
        echo ""
        echo "Initial content of alias_list.txt:"
        cat alias_list.txt
        echo ""

    # Step 2 - EXTRACT IMPORT STATEMENTS
    - name: Step 2 - Extract import statements
      run: |
        echo "Reading import references from file: ${{ github.event.inputs.test_file }}"
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        echo "References found:"
        echo "$FILE_REFERENCES"
        echo ""

    # Step 3 - RESOLVE IMPORT PATHS
    - name: Step 3 - Process and resolve paths iteratively
      run: |
        echo "Starting path resolution..."
        > resolved_files.txt
        > temp_resolved_files.txt
        echo "${{ github.event.inputs.test_file }}" >> resolved_files.txt
        echo "${{ github.event.inputs.test_file }}" >> temp_resolved_files.txt
        while true; do
          current_file=$(head -n 1 temp_resolved_files.txt)
          if [[ -z "$current_file" ]]; then
            echo "No more files to process, exiting..."
            break
          fi
          echo "Reading current file: $current_file"
          sed -i '1d' temp_resolved_files.txt
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'"'][^"'"'"']+["'"'"'];' "$current_file" || echo "")
          echo "References found in $current_file:"
          echo "$FILE_REFERENCES"
          echo ""
          while IFS= read -r file; do
            path=$(echo "$file" | sed -E 's/.*from\s+["'"'"']([^'"'"']+)["'"'"'];/\1/')
            resolved_path=""
            if [[ "$path" == .* || "$path" == ..* ]]; then
              resolved_path=$(realpath --relative-to=. "$(dirname "$current_file")/$path")
            fi
            if [[ "$path" == @* ]]; then
              alias_name=$(echo "$path" | cut -d'/' -f1)
              alias_subpath=$(echo "$path" | sed -E 's|^[^/]+/?||')
              alias_base=$(grep -o "\"$alias_name\"[[:space:]]*:[[:space:]]*\"[^\"]*\"" .aliases.json | awk -F ': ' '{print $2}' | tr -d '"')
              resolved_path="${alias_base}/$alias_subpath"
            fi
            if [[ "$resolved_path" != *.js && "$resolved_path" != *.ts ]]; then
              if [[ -f "${resolved_path}.js" ]]; then
                resolved_path="${resolved_path}.js"
              elif [[ -f "${resolved_path}.ts" ]]; then
                resolved_path="${resolved_path}.ts"
              fi
            fi
            resolved_path="${resolved_path#./}"
            if [[ "$resolved_path" == cypress/* ]]; then
              echo "Relevant file found: $resolved_path"
              if ! grep -qx "$resolved_path" resolved_files.txt; then
                echo "$resolved_path" >> resolved_files.txt
                echo "$resolved_path" >> temp_resolved_files.txt
              fi
            fi
          done <<< "$FILE_REFERENCES"
          echo "Current content of resolved_files.txt:"
          cat resolved_files.txt
          echo ""
          echo "Current content of temp_resolved_files.txt:"
          cat temp_resolved_files.txt
          echo ""
        done
        echo "Path resolution complete."
        echo "Final content of resolved_files.txt:"
        cat resolved_files.txt
        echo ""

    # Step 4 - EXTRACT 'cy.fixture' STATEMENTS
    - name: Step 4 - Search for 'cy.fixture' statements and store them
      run: |
        echo "Searching for 'cy.fixture' statements in relevant files..."
        > fixture_statements.txt
        while IFS= read -r resolved_file; do
          echo "Analyzing file: $resolved_file"
          grep -n "cy\.fixture" "$resolved_file" || true
          grep -n "cy\.fixture" "$resolved_file" >> fixture_statements.txt
        done < resolved_files.txt

    # Step 5 - EXTRACT PATHS FROM 'cy.fixture' STATEMENTS
    - name: Step 5 - Extract paths from 'cy.fixture' statements
      run: |
        echo "Extracting paths from 'cy.fixture' statements..."
        while IFS= read -r fixture_statement; do
          echo "Analyzing statement: $fixture_statement"
          echo "$fixture_statement" | sed -E 's/.*cy\.fixture\(["'"']([^"'"']+)["'"']\).*/\1/'
        done < fixture_statements.txt

    # Step 6 - FINAL CONTENT
    - name: Step 6 - Show final content of resolved files
      run: |
        echo "Displaying final content of resolved_files.txt:"
        cat resolved_files.txt

