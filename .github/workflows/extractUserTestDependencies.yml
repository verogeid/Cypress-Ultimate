Aquí tienes el workflow completo sin las explicaciones posteriores:

name: Extract File References

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'Ruta del archivo de prueba'
        required: true
        default: 'cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts'

jobs:
  extract-references:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Step 1 - Read aliases from .aliases.json
      run: |
        echo "Leyendo los alias desde .aliases.json"
        ALIAS_JSON=$(cat .aliases.json)
        echo "$ALIAS_JSON" | grep -o '"@[^"]*":\s*"[^"]*"' | awk -F ': ' '{print $1, $2}' > alias_list.txt
        echo "Alias leídos y almacenados en alias_list.txt"
        
    - name: Show alias list content
      run: |
        echo "Contenido de alias_list.txt:"
        cat alias_list.txt

    - name: Step 2 - Extract import and cy.fixture statements
      run: |
        echo "Leyendo las referencias de importación desde el archivo: ${{ github.event.inputs.test_file }}"
        FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'"'][^"'"']+["'"'];' "${{ github.event.inputs.test_file }}" || echo "")
        
        ##### Buscar referencias de cy.fixture
        FIXTURE_REFERENCES=$(grep -Eo 'cy\.fixture(.["'"'][^"'"']+["'"']).' "${{ github.event.inputs.test_file }}" || echo "")
        
        echo "Referencias encontradas:"
        echo "$FILE_REFERENCES"
        echo "$FIXTURE_REFERENCES"
        echo ""

    - name: Step 3 - Process and resolve paths from import and cy.fixture
      run: |
        echo "Iniciando la resolución de rutas..."
        echo "Inicializando archivo temporal: temp_resolved_files.txt"
        RESOLVED_FILES=""
        TEMP_FILES=""
        
        # Procesar importaciones
        while IFS= read -r file; do
          path=$(echo "$file" | sed -E 's/.*from\s+["'"']([^"'"']+)["'"'];/\1/')
          
          # Resolver rutas relativas
          if [[ "$path" == .* || "$path" == ..* ]]; then
            resolved_path=$(realpath --relative-to=. "$(dirname "${{ github.event.inputs.test_file }}")/$path")
            echo "Ruta resuelta (relativa): $resolved_path"
          fi
          
          # Resolver alias
          if [[ "$path" == @* ]]; then
            alias_name=$(echo "$path" | cut -d'/' -f1)
            alias_subpath=$(echo "$path" | sed -E 's|^[^/]+/?||')
            alias_base=$(grep -o '"$alias_name"[[:space:]]*:[[:space:]]*"[^"]*"' .aliases.json | awk -F ': ' '{print $2}' | tr -d '"')
            resolved_path="${alias_base}/$alias_subpath"
            echo "Ruta resuelta (alias): $resolved_path"
          fi

          # Agregar la ruta al archivo temporal
          TEMP_FILES+="$resolved_path"$'\n'
        done <<< "$FILE_REFERENCES"
        
        # Procesar cy.fixture
        while IFS= read -r fixture; do
          ##### Buscar la ruta de cy.fixture
          path=$(echo "$fixture" | sed -E 's/cy\.fixture(.["'"']([^"'"']+)["'"'])./\1/')
          resolved_path="$path"
          echo "Ruta de cy.fixture: $resolved_path"
          
          # Agregar la ruta al archivo temporal
          TEMP_FILES+="$resolved_path"$'\n'
        done <<< "$FIXTURE_REFERENCES"
        
        # Guardar resultados
        echo "Contenido actual de resolved_files.txt:"
        echo "$TEMP_FILES"
        echo "$TEMP_FILES" > resolved_files.txt
        echo ""

    - name: Show resolved files content
      run: |
        echo "Contenido de resolved_files.txt final:"
        cat resolved_files.txt
        echo ""

    - name: Step 4 - Save final results to a file
      run: |
        echo "$TEMP_FILES" > resolved_files.txt
        echo "Rutas relevantes guardadas en resolved_files.txt"

