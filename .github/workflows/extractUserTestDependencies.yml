name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          
          # Buscar todas las líneas con 'import' y extraer solo las rutas
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'\''][^"'\'' ]+["'\''];' "$TEST_POSIX")

          if [[ -z "$FILE_REFERENCES" ]]; then
            echo "No se encontraron referencias en el archivo de prueba."
          else
            echo "Referencias encontradas:"
            echo "$FILE_REFERENCES"

            # Inicializar variable para almacenar las rutas de importación
            RESOLVED_FILES=""

            # Extraer las rutas de importación
            while IFS= read -r file; do
              if [[ "$file" == @* ]]; then
                alias=$(echo "$file" | cut -d/ -f1)
                path=$(echo "$file" | cut -d/ -f2-)
                real_path=$(eval echo "\$$alias")/$path
                RESOLVED_FILES+="$real_path"$'\n'
              elif [[ "$file" == cypress/* ]]; then
                RESOLVED_FILES+="$file"$'\n'
              else
                RESOLVED_FILES+="$file"$'\n'
              fi
            done <<< "$FILE_REFERENCES"

            # Eliminar rutas duplicadas
            RESOLVED_FILES=$(echo "$RESOLVED_FILES" | sort | uniq)

            # Crear JSON con las rutas de los archivos en memoria
            # Corregir el formato del JSON para que las rutas estén bien formateadas
            JSON_OUTPUT="{\"source\":\"$TEST_POSIX\",\"files\":[$(echo "$RESOLVED_FILES" | sed 's/^/"/;s/$/"/' | paste -sd, -)]}"
            echo "JSON generado:"
            echo "$JSON_OUTPUT"
          fi

