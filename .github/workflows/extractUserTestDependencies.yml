name: Extract Files Used in Test

on:
  workflow_dispatch:
    inputs:
      test_posix:
        description: "Ruta del archivo de prueba .api.cy.ts"
        required: true
        default: "cypress/e2e/Tests/API/Cards/GX3-5811-boardMembers.api.cy.ts"
        type: string

jobs:
  extract_files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Validar entrada de archivo de prueba
        id: validate-input
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          if [[ ! -f "$TEST_POSIX" ]]; then
            echo "El archivo especificado no existe: $TEST_POSIX"
            exit 1
          fi
          echo "Archivo de prueba validado: $TEST_POSIX"

      - name: Cargar alias desde archivo .aliases.json
        id: load-aliases
        run: |
          ALIAS_CONFIG_PATH="./.aliases.json"
          declare -A alias_map

          if [[ ! -f "$ALIAS_CONFIG_PATH" ]]; then
            echo "El archivo de alias no existe: $ALIAS_CONFIG_PATH"
            exit 1
          fi

          # Leer los alias del archivo y mapearlos
          alias_entries=$(jq -r '.[] | {key: .key, value: .value[0]} | @base64' "$ALIAS_CONFIG_PATH")
          while IFS= read -r line; do
            alias_name=$(echo "$line" | base64 --decode | jq -r '.key')
            real_path=$(echo "$line" | base64 --decode | jq -r '.value')
            alias_map["$alias_name"]="$real_path"
          done <<< "$alias_entries"

          echo "Alias cargados correctamente"

      - name: Buscar referencias en el archivo de prueba
        id: find-imports
        run: |
          TEST_POSIX="${{ inputs.test_posix }}"
          # echo "Contenido del archivo de prueba:"
          # cat "$TEST_POSIX"

          # Buscar sentencias import que terminan con ;
          FILE_REFERENCES=$(grep -Eo 'import\s+.*\s+from\s+["'\''][^"'\'' ]+["'\''];' "$TEST_POSIX" || echo "")

          # Si se encuentran referencias, procesarlas
          if [[ -n "$FILE_REFERENCES" ]]; then
            RESOLVED_FILES=""
            # Procesar cada línea que contiene una referencia de importación
            while IFS= read -r file; do
              # Extraer solo la ruta después de "from"
              path=$(echo "$file" | sed -E 's/.*from\s+["'\'']([^"'\'']+)["'\''];/\1/')

              # Sustituir alias por ruta real
              for alias in "${!alias_map[@]}"; do
                if [[ "$path" == $alias* ]]; then
                  path="${path/$alias/${alias_map[$alias]}}"
                  break
                fi
              done

              # Procesar rutas relativas
              if [[ "$path" == ./* ]]; then
                path="$(dirname "$TEST_POSIX")/$path"
              elif [[ "$path" == ../* ]]; then
                path="$(dirname "$TEST_POSIX")/$path"
              fi

              RESOLVED_FILES+="$path"$'\n'
            done <<< "$FILE_REFERENCES"

            # Generar el JSON con las rutas
            JSON_OUTPUT=$(echo "$RESOLVED_FILES" | sort | uniq | jq -Rn --arg source "$TEST_POSIX" '{source: $source, files: [inputs | split("\n") | map(select(length > 0))]}')
            echo "$JSON_OUTPUT"
          fi

