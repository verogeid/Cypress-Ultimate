#? El Pipeline "Sanity" es una estrategia de prueba perfecta para verificar que un Módulo entero de la App o una funcionalidad específica funcionen como se espera. Se puede realizar pruebas de cualquier nivel (Unit, Integration, E2E) para esta estrategia de pruebas. También se usa como "Story Testing" para ejecuciones de pruebas de cobertura de US (importar resultados a Jira XRay

name: 🧪 CI/CD SanityTest Pipeline
run-name: ${{github.actor}}👨🏻‍🔬 triggered SanityTest in ${{github.ref_name}}

on:
  workflow_dispatch:
    inputs:
      system:
        description: 🚀Select the OS
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - windows-latest
      browser:
        description: Select the Browser
        required: true
        default: 'chrome'
        type: choice
        options:
        - chrome
        - firefox
        - edge
        - safari
      environment:
        description: 🚀Select the Test Environment
        required: true
        default: 'QA'
        type: choice
        options:
        #? Orden de Deployments...
        - DEV #? donde los developers work
        - SANDBOX #? donde los QA realizan smoke y exploratory testing.
        - QA #? donde los QA realizan smoke, sanity y regression testing.
        - STAGING #? donde los QA realizan smoke, sanity o regression testing.
        - UAT #? donde los beta testers realizan acceptance testing.
        - PROD #? donde los usuarios finales usan la App.
      test_run:
        description: "🚀 Enter the Test Suite to Run."
        required: true
        default: '<Enter the Posix path of your test here>'
        type: string
      xray_tx:
        description: "🚀 Enter the Test Execution ID. The TX key will be extracted from the filename if it follows the format GX[1-4]-[0-9][_|-]**.cy.[js|ts]. You can use your own in the following field. (Def: GX3-0000)"
        required: false
        type: string

jobs:
  Server_Config:
    runs-on: ${{ github.event.inputs.system }}
    outputs:
      DEFAULT_XRAYKEY: ${{ env.DEFAULT_XRAY_KEY }}
      REPORT_DIR: ${{ env.MOCHA_REPORT_DIR }}
    environment:
      name: ${{ github.event.inputs.environment }}
    env:
      MOCHA_REPORT_DIR: 'cypress/tests_reports/chrome_mocha_report'
      TRELLO_TOKEN: ${{ secrets.TRELLO_TOKEN }}
      TRELLO_KEY: ${{ secrets.TRELLO_KEY }}
      DEFAULT_XRAY_KEY: 'GX3-0000'

    steps:
    - name: 💻 Checkout Repo
      uses: actions/checkout@v4

    - name: 🗄️ Cache Node Modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ github.event.inputs.system }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: 💿 Install Node.js v20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 🧬 Install Project Dependencies
      run: bun install

    - name: 🔎 Check Typescript Code
      run: | #? Corre el linter de TypeScript para verificar errores de sintaxis.
        bun run check:ts

    - name: 📦 Prepare Artifact
      run: |
        mkdir -p temp_artifact  # Crear una carpeta temporal
        cp -R cypress temp_artifact/
        cp package.json temp_artifact/
        cp bun.lockb temp_artifact/

    - name: 📦 Upload Cypress Structure
      uses: actions/upload-artifact@v4
      with:
        name: cypress-structure
        path: temp_artifact/
        overwrite: true

  Xray_Data_Extraction:
    needs: Server_Config
    runs-on: ${{ github.event.inputs.system }}
    outputs:
      xray_tx: ${{ steps.assign-xray-data.outputs.testexec_key }}
    steps:
    - name: Extract Xray TX from Selected File
      id: extract-xray-data
      run: |
        
        # Extraer el ID de ejecución

        # Verifica si el nombre del archivo (sin la ruta) coincide con el patrón esperado.
        # El patrón busca un nombre de archivo en el formato 'GX[1-4]-[número][guion bajo o guion][cualquier cosa].cy.ts o .cy.js'.
        # ^(GX[1-4])       : Comienza con "GX" seguido de un número del 1 al 4.
        # -([0-9]+)       : Un guion seguido de uno o más dígitos numéricos.
        # (_|-)            : Un guion bajo o un guion después del número.
        # (.+)            : Cualquier secuencia de caracteres.
        # \.(cy\.ts|cy\.js)$ : Termina con '.cy.ts' o '.cy.js'.

        if [[ "$(basename "${{ github.event.inputs.test_run }}")" =~ ^(GX[1-4])-([0-9]+)(_|-)(.+)\.(cy\.ts|cy\.js)$ ]]; then
          xray_tx="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
          echo "Extracted Xray TX: $xray_tx"
        fi

    - name: Assign Xray TX
      id: assign-xray-data
      run: |
        # Definición de constantes para valores por defecto
        testexec_key="${{ needs.Server_Config.outputs.DEFAULT_XRAYKEY }}"

        # Asignar valores a las variables según lógica
        if [ -n "${{ github.event.inputs.xray_tx }}" ]; then
          testexec_key="${{ github.event.inputs.xray_tx }}"
        elif [ -n "$xray_tx" ]; then
          testexec_key="$xray_tx"
        fi

        echo "Final Test Execution Key: $testexec_key"
        echo "testexec_key=$testexec_key" >> $GITHUB_OUTPUT

  SanityTest:
    needs: Server_Config
    runs-on: ${{ github.event.inputs.system }}
    outputs:
      no_tests: ${{ steps.check-tests.outputs.no_tests }}
      result: ${{ job.status }}
    steps:
    - name: 📥 Download Cypress Structure
      uses: actions/download-artifact@v4
      with:
        name: cypress-structure

    - name: 🗄️ Restore Node Modules Cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ github.event.inputs.system }}-node-${{ hashFiles('**/bun.lockb') }}

    - name: Check for Tests
      id: check-tests
      run: |
        # Verifica si el archivo de prueba especificado existe
        if [ ! -f "${{ github.event.inputs.test_run }}" ]; then
          echo "${{ github.event.inputs.test_run }}"
          echo "The specified file does not exist."
          echo "no_tests=true" >> $GITHUB_OUTPUT 
        else
          # Busca si el archivo contiene 'expect' o bloques 'it'
          # `grep`: comando utilizado para buscar texto dentro de archivos.
          # `-q`: opción que silencia la salida de `grep`; solo devuelve un código de salida.
          # `"it("`: patrón de búsqueda.
          # `${{ github.event.inputs.test_run }}`: ruta del archivo de prueba.

          if grep -q "expect" "${{ github.event.inputs.test_run }}" || grep -q "it(" "${{ github.event.inputs.test_run }}"; then 
            echo "Tests found."
            echo "no_tests=false" >> $GITHUB_OUTPUT 
          else 
            echo "No tests found in the file." 
            echo "no_tests=true" >> $GITHUB_OUTPUT
          fi
        fi

        echo "Current directory:"
        pwd
        echo "Permissions"
        ls -la
        basepath=$(dirname "${{ github.event.inputs.test_run }}")
        echo "$basepath content:"
        ls "$basepath"

    - name: 🧪 Cypress Run Sanity Test
      id: cypress-run
      if: steps.check-tests.outputs.no_tests == 'false'
      uses: cypress-io/github-action@v4
      with:
        browser: ${{ github.event.inputs.browser }}
        command: bun run test:sanity:ci ${{ github.event.inputs.test_run }}

  Reports_Generation:
    needs: [ SanityTest, Server_Config, Xray_Data_Extraction ]
    runs-on: ${{ github.event.inputs.system }}
    steps:
    - name: 📬 Generate JUnit/Mocha Report
      if: always() && needs.SanityTest.outputs.no_tests == 'false'
      run: bun run chrome:report

    - name: 📊 Upload Artifact Mochawesome Report
      if: always() && needs.SanityTest.outputs.no_tests == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: sanity-mocha-report
        path: ${{ needs.Server_Config.outputs.REPORT_DIR }}
        retention-days: 15

    - name: 🚀 Deploy Mocha Report to GitHub Pages
      if: always() && needs.SanityTest.outputs.no_tests == 'false'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages #? the branch used for the GitHub Pages content.
        destination_dir: sanity/${{ needs.Xray_Data_Extraction.outputs.xray_tx }} #? this is the directory inside the gh-pages branch where the MOCHA_REPORT_DIR will be saved.
        publish_dir: ${{ needs.Server_Config.outputs.REPORT_DIR }} #? the directory to be published.
        keep_files: true #? true is required to work properly with the subfolder option in the Build Allure Report step.

    - name: Debug Check Tests Output
      run: |
        echo "Check Tests Output: ${{ needs.SanityTest.outputs.no_tests }}"

  Notification:
    needs: [ Reports_Generation, SanityTest ]
    if: always()
    runs-on: ubuntu-latest
    steps:

    - name: Prepare Message
      id: prepare-message
      run: |
        SLACK_MESSAGE="🧪(${GITHUB_REPOSITORY}): ${GITHUB_ACTOR} triggered SanityTest 🚀 \nResult: *$(echo '${{ needs.SanityTest.outputs.result }}' | tr '[:lower:]' '[:upper:]')*"
        echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV

    - name: Create Manual Slack Message
      run: |
        echo "🧪(${{ github.repository }}): ${{ github.actor }} triggered SanityTest🚀"
        if [ "${{ needs.SanityTest.outputs.no_tests }}" == "true" ]; then
          echo "Result: *NO TEST FOUND*"
        else
          echo "Result: *$(echo "${{ needs.SanityTest.outputs.result }}" | tr '[:lower:]' '[:upper:]')*"
        fi
