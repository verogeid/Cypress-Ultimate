#? El Pipeline "Sanity" es una estrategia de prueba perfecta para verificar que un módulo entero de la app o una funcionalidad específica funcionen como se espera.
#? Se puede realizar pruebas de cualquier nivel (Unit, Integration, E2E) para esta estrategia de pruebas.
#? También se usa como "Story Testing" para ejecuciones de pruebas de cobertura de US e importar resultados a Jira XRay.

name: 🧪 CI/CD SanityTest Pipeline
run-name: ${{github.actor}}👨🏻‍🔬 triggered SanityTest in ${{github.ref_name}}

on:
  workflow_dispatch:
    inputs:
      system:
        description: 🚀Select the OS
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - windows-latest
      browser:
        description: Select the Browser
        required: true
        default: 'chrome'
        type: choice
        options:
        - chrome
        - firefox
        - edge
        - safari
      environment:
        description: 🚀Select the Test Environment
        required: true
        default: 'QA'
        type: choice
        options:
        - DEV #? donde los developers work
        - SANDBOX #? donde los QA realizan smoke y exploratory testing.
        - QA #? donde los QA realizan smoke, sanity y regression testing.
        - STAGING #? donde los QA realizan smoke, sanity o regression testing.
        - UAT #? donde los beta testers realizan acceptance testing.
        - PROD #? donde los usuarios finales usan la App.
      test_run:
        description: "🚀 Enter the Test Suite to Run."
        required: true
        default: 'cypress/e2e/Tests/ToolsQA/Forms/GX3-5746-Practice-Form.cy.ts'
        #'<Enter the Posix path of your test here>'
        type: string
      xray_tx:
        description: "🚀 Enter the Test Execution ID. The TX key will be extracted from the filename if it follows the format GX[1-4]-[0-9][_|-]**.cy.[js|ts]. You can use your own in the following field. (Def: GX3-0000)"
        required: false
        type: string

jobs:
  Server_Config:
    runs-on: ${{ github.event.inputs.system }}
    outputs:
      DEFAULT_XRAYKEY: ${{ env.DEFAULT_XRAY_KEY }}
      REPORT_DIR: ${{ env.MOCHA_REPORT_DIR }}
      no_tests: ${{ steps.check-tests.outputs.no_tests }}
      xray_tx: ${{ steps.assign-xray-data.outputs.testexec_key }}
    environment:
      name: ${{ github.event.inputs.environment }}
    env:
      MOCHA_REPORT_DIR: 'cypress/tests_reports/chrome_mocha_report'
      TRELLO_TOKEN: ${{ secrets.TRELLO_TOKEN }}
      TRELLO_KEY: ${{ secrets.TRELLO_KEY }}
      DEFAULT_XRAY_KEY: 'GX3-0000'

    steps:
    - name: 💻 Checkout Repo
      uses: actions/checkout@v4

    - name: 🗄️ Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ~/.bun
        key: ${{ github.event.inputs.system }}-bun-${{ hashFiles('**/bun.lockb') }}

    - name: 💿 Install Node.js v20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 🔎 Check Typescript Code
      run: | #? Corre el linter de TypeScript para verificar errores de sintaxis.
        bun run check:ts

    - name: Check for Tests
      id: check-tests
      run: |
        test_run="${{ github.event.inputs.test_run }}"

        # Elimina los espacios al principio y al final
        test_run=$(echo "$test_run" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        if [[ ! -f "$test_run" || ! "$test_run" =~ \.cy\.[jt]s$ ]]; then
          echo "No test found"
          echo "no_tests=true" >> $GITHUB_OUTPUT
        else
          if grep -q "expect" "$test_run" || grep -q "it(" "$test_run"; then
            echo "Tests found"
            echo "no_tests=false" >> $GITHUB_OUTPUT
          else
            echo "No test found"
            echo "no_tests=true" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Extract Xray TX from Selected File
      id: extract-xray-data
      run: |
        if [[ "$(basename "${{ github.event.inputs.test_run }}")" =~ ^(GX[1-4])-([0-9]+)(_|-)(.+)\.(cy\.ts|cy\.js)$ ]]; then
          xray_tx="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
          echo "Extracted Xray TX: $xray_tx"
        else 
          echo "No valid Xray TX found in the file name."
        fi

    - name: Assign Xray TX
      id: assign-xray-data
      run: |
        testexec_key="${{ env.DEFAULT_XRAY_KEY }}"
        #needs.Server_Config.outputs.DEFAULT_XRAYKEY

        if [ -n "${{ github.event.inputs.xray_tx }}" ]; then
          testexec_key="${{ github.event.inputs.xray_tx }}"
        elif [ -n "$xray_tx" ]; then
          testexec_key="$xray_tx"
        fi

        echo "Using testexec_key: $testexec_key"
        echo "testexec_key=$testexec_key" >> $GITHUB_OUTPUT

    - name: 🧬 Install Project Dependencies
      run: bun install

    #- name: Check Cypress Installation
    #  run: |
    #    which cypress || bun install cypres

    - name: 📂 Ensure Test Result Directories Exist
      run: |
        # Crear las carpetas necesarias solo si no existen
        mkdir -p cypress/tests_results/junit/chrome
        mkdir -p cypress/tests_results/mocha/chrome

    - name: 📦 Prepare Temporary Folder for Artifacts
      run: |
        mkdir -p temp_artifact
        cp -R cypress temp_artifact/
        cp package.json temp_artifact/
        cp bun.lockb temp_artifact/
        cp cypress.* temp_artifact/
        cp tsconfig.* temp_artifact/

    - name: 📦 Upload Cypress Structure
      uses: actions/upload-artifact@v4
      with:
        name: cypress-structure
        path: temp_artifact/
        overwrite: true
        retention-days: 15

  SanityTest:
    needs: Server_Config
    runs-on: ${{ github.event.inputs.system }}
    outputs:
      result: ${{ job.status }}
    steps:
    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 📥 Download Cypress Structure
      uses: actions/download-artifact@v4
      with:
        name: cypress-structure

    - name: 🗄️ Restore Node Modules Cache
      uses: actions/cache@v3
      with:
        path: ~/.bun
        key: ${{ github.event.inputs.system }}-bun-${{ hashFiles('**/bun.lockb') }}

    - name: Check Cypress Installation
      run: |
        if ! which cypress > /dev/null; then
          echo "Cypress not found. Installing ..."
          bun install cypress
        else
          echo "Cypress is already installed."
        fi

    - name: 🧪 Cypress Run Sanity Test
      id: cypress-run
      if: needs.Server_Config.outputs.no_tests == 'false'
      run: bun x cypress run --browser ${{ github.event.inputs.browser }} --spec ${{ github.event.inputs.test_run }}

    - name: 📦 Prepare Temporary Folder for Results and Config
      run: |
        mkdir -p temp_artifact
        cp -R cypress/tests_results/ temp_artifact/
        cp tsconfig.* temp_artifact/
        cp cypress.* temp_artifact/
        cp package.json temp_artifact/
        cp bun.lockb temp_artifact/

    - name: 📦 Upload Cypress Results and Config
      if: needs.Server_Config.outputs.no_tests == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: cypress-results-and-config
        path: temp_artifact/
        retention-days: 15

  Reports_Generation:
    needs: [ SanityTest, Server_Config ]
    runs-on: ${{ github.event.inputs.system }}
    if: needs.Server_Config.outputs.no_tests == 'false'
    steps:
    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 📥 Download Cypress Results and Config
      uses: actions/download-artifact@v4
      with:
        name: cypress-results-and-config

    #- name: 📥 Download Cypress Structure
    #  uses: actions/download-artifact@v4
    #  with:
    #    name: cypress-structure

    - name: 🗄️ Restore Node Modules Cache
      uses: actions/cache@v3
      with:
        path: ~/.bun
        key: ${{ github.event.inputs.system }}-bun-${{ hashFiles('**/bun.lockb') }}

    - name: 📬 Check for JRM and Install if Missing
      run: |
        if ! command -v jrm &>/dev/null; then
          echo "JRM not found, installing..."
          bun add -d junit-report-merger
        else
          echo "JRM is already installed."
        fi

    - name: 📥 Run Chrome Report
      run: |
        if [ -d "cypress/tests_results/junit/chrome" ] && [ "$(ls -A cypress/tests_results/junit/chrome)" ]; then
          bun run merge:junit:c:report
        else
          echo "No JUnit results found, skipping merge."
        fi

        if [ -d "cypress/tests_results/mocha/chrome" ] && [ "$(ls -A cypress/tests_results/mocha/chrome)" ]; then
          bun run merge:json:c:report
        else
          echo "No Mocha results found, skipping merge."
        fi

    - name: 📬 Generate JUnit/Mocha Report
      if: always()
      run: bun run chrome:report

    - name: 📊 Upload Artifact Mochawesome Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sanity-mocha-report
        path: ${{ needs.Server_Config.outputs.REPORT_DIR }}
        retention-days: 15

    - name: 🚀 Deploy Mocha Report to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages #? the branch used for the GitHub Pages content.
        destination_dir: sanity/${{ needs.Server_Config.outputs.xray_tx }} #? this is the directory inside the gh-pages branch where the MOCHA_REPORT_DIR will be saved.
        publish_dir: ${{ needs.Server_Config.outputs.REPORT_DIR }} #? the directory to be published.
        keep_files: true #? true is required to work properly with the subfolder option in the Build Allure Report step.

  Notification:
    needs: [ SanityTest, Server_Config ]
    if: always()
    runs-on: ubuntu-latest
    steps:

    - name: Prepare Message
      id: prepare-message
      run: |
        SLACK_MESSAGE="🧪(${GITHUB_REPOSITORY}): ${GITHUB_ACTOR} triggered SanityTest 🚀"

        if [ "${{ needs.Server_Config.outputs.no_tests }}" == "true" ]; then
          SLACK_MESSAGE="$SLACK_MESSAGE \nResult: *NO TEST FOUND*"
        else
          SLACK_MESSAGE="$SLACK_MESSAGE \nResult: *$(echo '${{ needs.SanityTest.outputs.result }}' | tr '[:lower:]' '[:upper:]')*"
        fi

        echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV

    - name: Display Slack Message
      run: |
        echo "SLACK MESSAGE: ${{ steps.prepare-message.outputs.slack_message }}"
